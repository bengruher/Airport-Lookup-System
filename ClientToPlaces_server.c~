/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */

#include "ClientToPlaces.h"
#include "PlacesToAirport.h"
#include "trie.h"
#include <string.h>
#include <iostream>
#include <locale>
#include <stdio.h>
using namespace std;


bool start = false;

void buildTree(){
    trie* cityTrie = new trie();

    FILE *inFile;
    inFile = fopen(places2k, "r");
    char line[167];
    string state;
    string city;
    string place;
    double longitude;
    double latitude;
    char stateCity[68];
    
    
    while(fgets(line, 167, inFile) != NULL){
        string location(line);
        state = location.substr(0,2);
        city = location.substr(9, 72);
        place.append(state);
        place.append(city);
    
	
	locale loc;
	for(string::size_type i = 0; i < place.length(); i++){
	    tolower(place[i],loc);
	}
        

	longitude = stod(location.substr(153,163));
        latitude = stod(location.substr(143,152));
        strcpy(stateCity, place.c_str());
        cityTrie->insert(stateCity, longitude, latitude);
	place.clear();
    }
    
    fclose(inFile);
    
}


returnTypeC *
ctop_1_svc(city *argp, struct svc_req *rqstp)
{
  
    
    if(!start){
	buildTree();
	start = true;
    }
     

    static returnTypeC  result;

	/*
	 * insert server code here
	 */
    CLIENT* clnt;
    returnTypeA *result_1;
    LatLon ptoa_1_arg;
    char* host = "localhost";
    airports** airportList;
    places** listWrite;

#ifndef DEBUG
    clnt = clnt_create (host, PLACES_TO_AIRPORT, PLACES_TO_VERS, "udp");
    if (clnt == NULL) {
      clnt_pcreateerror (host);
      exit (1);
    }
#endif  /* DEBUG */
   

    result_1 = ptoa_1(&ptoa_1_arg, clnt);
    if (result_1 == (returnTypeA *) NULL) {
      clnt_perror (clnt, "call failed");
    }
    
    airportList = &result_1->returnTypeA_u.resultA;
    listWrite = &result.returnTypeC_u.resultC;
    
    (*listWrite) = new places();
    airports* aNode = (*airportList);
    places* pNode = (*listWrite);
    places* prev;

    strncpy((pNode)->name, (aNode)->name, 63); //CHANGE ALL THESSEE!!!!!!!!
    strncpy((pNode)->code, (aNode)->code, 3
    strncpy((pNode)->state, (aNode)->state, 2);
    (pNode)->dist = 5.55;
    (pNode)->lat = 30.666;
    (pNode)->lon = 50.00;
    prev = pNode;
    pNode = new places();
    prev->next = pNode;
    aNode = aNode->next;
    
    /*
    while(aNode != NULL){
	strncpy((pNode)->name, (aNode)->name, 63);
	strncpy((pNode)->code, (aNode)->code, 3);
	strncpy((pNode)->state, (aNode)->state, 4);
	(pNode)->dist = (aNode)->dist;
	prev = pNode;
	pNode = new places();
	prev->next = pNode;
	aNode = aNode->next;
    }
    */

    return &result;
}


